// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]  
}

datasource db {
  provider = "sqlite"
  url      =  env("DATABASE_URL")
}

model ShortenedUrl {
  id Int @id @default(autoincrement())
  slug String @unique
  originalUrl String
  shortUrl String @unique
}

model SimpleShortenedUrl {
    id          Int      @id @default(autoincrement())
    originalUrl String  
    customSlug  String   @unique
    createdAt   DateTime @default(now())
}

model link {
    id          Int      @id @default(autoincrement())
    url         String   
    slug        String   @unique
    description String?
    createdAt   DateTime @default(now())
    createdBy   User?    @relation(fields: [creatorId], references: [id])
    creatorId   String

    @@index(slug)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  links         link[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}